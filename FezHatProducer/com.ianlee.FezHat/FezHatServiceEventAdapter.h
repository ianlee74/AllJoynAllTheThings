//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace ianlee { namespace FezHat {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement IFezHatService. Instead, FezHatServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class FezHatServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] IFezHatService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatSetRedLedStateCalledEventArgs^>^ SetRedLedStateCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatSetRedLedStateCalledEventArgs^>^ handler) 
        { 
            return _SetRedLedStateCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<FezHatServiceEventAdapter^>(sender), safe_cast<FezHatSetRedLedStateCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetRedLedStateCalled -= token; 
        } 
    internal: 
        void raise(FezHatServiceEventAdapter^ sender, FezHatSetRedLedStateCalledEventArgs^ args) 
        { 
            _SetRedLedStateCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatGetRedLedStateCalledEventArgs^>^ GetRedLedStateCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatGetRedLedStateCalledEventArgs^>^ handler) 
        { 
            return _GetRedLedStateCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<FezHatServiceEventAdapter^>(sender), safe_cast<FezHatGetRedLedStateCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetRedLedStateCalled -= token; 
        } 
    internal: 
        void raise(FezHatServiceEventAdapter^ sender, FezHatGetRedLedStateCalledEventArgs^ args) 
        { 
            _GetRedLedStateCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatSetRgbLedD2ColorCalledEventArgs^>^ SetRgbLedD2ColorCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatSetRgbLedD2ColorCalledEventArgs^>^ handler) 
        { 
            return _SetRgbLedD2ColorCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<FezHatServiceEventAdapter^>(sender), safe_cast<FezHatSetRgbLedD2ColorCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetRgbLedD2ColorCalled -= token; 
        } 
    internal: 
        void raise(FezHatServiceEventAdapter^ sender, FezHatSetRgbLedD2ColorCalledEventArgs^ args) 
        { 
            _SetRgbLedD2ColorCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatSetRgbLedD3ColorCalledEventArgs^>^ SetRgbLedD3ColorCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatSetRgbLedD3ColorCalledEventArgs^>^ handler) 
        { 
            return _SetRgbLedD3ColorCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<FezHatServiceEventAdapter^>(sender), safe_cast<FezHatSetRgbLedD3ColorCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetRgbLedD3ColorCalled -= token; 
        } 
    internal: 
        void raise(FezHatServiceEventAdapter^ sender, FezHatSetRgbLedD3ColorCalledEventArgs^ args) 
        { 
            _SetRgbLedD3ColorCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatGetLightSensorValueCalledEventArgs^>^ GetLightSensorValueCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatGetLightSensorValueCalledEventArgs^>^ handler) 
        { 
            return _GetLightSensorValueCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<FezHatServiceEventAdapter^>(sender), safe_cast<FezHatGetLightSensorValueCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLightSensorValueCalled -= token; 
        } 
    internal: 
        void raise(FezHatServiceEventAdapter^ sender, FezHatGetLightSensorValueCalledEventArgs^ args) 
        { 
            _GetLightSensorValueCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatGetTemperatureSensorValueCalledEventArgs^>^ GetTemperatureSensorValueCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<FezHatServiceEventAdapter^, FezHatGetTemperatureSensorValueCalledEventArgs^>^ handler) 
        { 
            return _GetTemperatureSensorValueCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<FezHatServiceEventAdapter^>(sender), safe_cast<FezHatGetTemperatureSensorValueCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetTemperatureSensorValueCalled -= token; 
        } 
    internal: 
        void raise(FezHatServiceEventAdapter^ sender, FezHatGetTemperatureSensorValueCalledEventArgs^ args) 
        { 
            _GetTemperatureSensorValueCalled(sender, args);
        } 
    }

    // Property Read Events
    // Property Write Events
    // IFezHatService Implementation
    virtual Windows::Foundation::IAsyncOperation<FezHatSetRedLedStateResult^>^ SetRedLedStateAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOn);
    virtual Windows::Foundation::IAsyncOperation<FezHatGetRedLedStateResult^>^ GetRedLedStateAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<FezHatSetRgbLedD2ColorResult^>^ SetRgbLedD2ColorAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOn, _In_ byte interfaceMemberRed, _In_ byte interfaceMemberGreen, _In_ byte interfaceMemberBlue);
    virtual Windows::Foundation::IAsyncOperation<FezHatSetRgbLedD3ColorResult^>^ SetRgbLedD3ColorAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOn, _In_ byte interfaceMemberRed, _In_ byte interfaceMemberGreen, _In_ byte interfaceMemberBlue);
    virtual Windows::Foundation::IAsyncOperation<FezHatGetLightSensorValueResult^>^ GetLightSensorValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<FezHatGetTemperatureSensorValueResult^>^ GetTemperatureSensorValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);



private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetRedLedStateCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetRedLedStateCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetRgbLedD2ColorCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetRgbLedD3ColorCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLightSensorValueCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetTemperatureSensorValueCalled;
};

} } } 
